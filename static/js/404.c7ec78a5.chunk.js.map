{"version":3,"file":"static/js/404.c7ec78a5.chunk.js","mappings":"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","sources":["api/movies.js","components/ListOfMovies/ListOfMovies.styled.jsx","components/ListOfMovies/ListOfMovies.jsx","components/Search/Search.styled.jsx","components/Search/Search.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '8ef56f4ee798497d067f56c824cb15b9';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function getMovies(type, id, query) {\n  const CONSTANTS_ENDPOINTS_TYPES = {\n    trending: '/trending/movie/day',\n    movieById: `/movie/${id}`,\n    searchByQuery: '/search/movie',\n    cast: `/movie/${id}/credits`,\n    reviews: `/movie/${id}/reviews`,\n  };\n\n  const searchParams = new URLSearchParams({\n    query: query,\n    include_adult: true,\n  });\n\n  const response = await axios.get(\n    `${BASE_URL}${CONSTANTS_ENDPOINTS_TYPES[type]}?api_key=${API_KEY}&${\n      type === 'searchByQuery' ? searchParams : ''\n    }`\n  );\n  return response.data;\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 24px;\n  justify-content: center;\n  margin-top: 30px;\n  flex-wrap: wrap;\n`;\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  border-radius: 20px;\n  padding: 15px;\n  width: calc((100% - 72px) / 5);\n`;\nexport const StyledLink = styled(Link)`\n  color: #585858;\n`;\nexport const Div = styled.div``;\nexport const Image = styled.img``;\nexport const Title = styled.h3``;\nexport const Description = styled.p``;\n","import { useLocation } from 'react-router-dom';\nimport * as Styled from './ListOfMovies.styled';\n\nconst ListOfMovies = ({ movies }) => {\n  const location = useLocation();\n  const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/';\n\n  const datePref = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  return (\n    <Styled.List>\n      {movies.map(movie => (\n        <Styled.ListItem key={movie.id}>\n          <Styled.StyledLink\n            to={\n              location.pathname === '/' ? `movies/${movie.id}` : `${movie.id}`\n            }\n            state={{ from: location }}\n          >\n            <Styled.Div>\n              <Styled.Image\n                src={`${POSTER_BASE_URL}w200${movie.poster_path}`}\n                alt={movie.title}\n              />\n            </Styled.Div>\n            <Styled.Title>{movie.title}</Styled.Title>\n            <Styled.Description>\n              {movie.release_date\n                ? new Date(movie.release_date).toLocaleDateString(\n                    undefined,\n                    datePref\n                  )\n                : ''}\n            </Styled.Description>\n          </Styled.StyledLink>\n        </Styled.ListItem>\n      ))}\n    </Styled.List>\n  );\n};\n\nexport default ListOfMovies;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\nexport const Input = styled.input`\n  padding: 20px;\n  border-radius: 20px;\n  border: 2px solid #707070;\n  font-size: 15px;\n  &::placeholder {\n    text-align: center;\n    font-size: 13px;\n    color: #707070;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as Styled from './Search.styled';\n\nconst Search = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [error, setError] = useState('');\n\n  const handleChange = ({ target: { value } }) => {\n    if (!value) setSearchParams({});\n    setQuery(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query === '') {\n      setError('Please enter your search query');\n      return;\n    }\n    setSearchParams({ query: query });\n    setError('');\n  };\n\n  useEffect(() => {\n    const value = searchParams.get('query');\n    if (value) {\n      setQuery(value);\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      {error !== '' && (\n        <h1 style={{ display: 'flex', justifyContent: 'center' }}>{error}</h1>\n      )}\n      <Styled.Form onSubmit={handleSubmit}>\n        <Styled.Input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"What are we looking for today?\"\n          onChange={handleChange}\n        ></Styled.Input>\n      </Styled.Form>\n    </>\n  );\n};\n\nexport default Search;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovies } from 'api/movies';\nimport Search from 'components/Search/Search';\nimport ListOfMovies from 'components/ListOfMovies/ListOfMovies';\n\nconst MoviesPage = () => {\n  const [searchParams] = useSearchParams();\n  const [moviesData, setMoviesData] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) return;\n\n    getMovies('searchByQuery', 0, query)\n      .then(({ results }) => {\n        if (!results.length) {\n          setError(`Sorry, there are no movies regarding your query`);\n          return;\n        }\n        setMoviesData(results);\n        setError('');\n      })\n      .catch(() => setError('Oops, something went wrong'));\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Search />\n      {error === '' ? <ListOfMovies movies={moviesData} /> : <h1>{error}</h1>}\n    </div>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["API_KEY","BASE_URL","getMovies","_x","_x2","_x3","_getMovies","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","type","id","query","CONSTANTS_ENDPOINTS_TYPES","searchParams","response","_context","prev","next","trending","movieById","concat","searchByQuery","cast","reviews","URLSearchParams","include_adult","axios","sent","abrupt","data","stop","List","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","StyledLink","Link","_templateObject3","Div","_templateObject4","Image","_templateObject5","Title","_templateObject6","Description","_templateObject7","_ref","movies","location","useLocation","datePref","weekday","year","month","day","_jsx","Styled","children","map","movie","_jsxs","to","pathname","state","from","src","poster_path","alt","title","release_date","Date","toLocaleDateString","undefined","Form","Input","_useState","useState","_useState2","_slicedToArray","setQuery","_useSearchParams","useSearchParams","_useSearchParams2","setSearchParams","_useState3","_useState4","error","setError","useEffect","value","get","_Fragment","style","display","justifyContent","onSubmit","event","preventDefault","name","autoComplete","autoFocus","placeholder","onChange","target","moviesData","setMoviesData","then","results","length","catch","Search","ListOfMovies"],"sourceRoot":""}